from __future__ import division
import sys
sys.path.append('.')
sys.path.append('lib/python2.7/site-packages/')
import boot
import os, urllib, logging, json

from twisted.application import internet, service
from twisted.python.util import sibpath
from twisted.internet import reactor
from twisted.web import http
from twisted.web.proxy import ReverseProxyResource
from nevow import appserver, inevow, url
from nevow import loaders, rend, static, tags as T
from xml.utils import iso8601
from mediaresource import MediaResource, getRequestedSize
from rdflib import URIRef
import auth, networking, restkit
import access, webuser
from db import getGraph
from urls import absoluteSite, absSiteHost, relPath
from ns import PHO, SITE, FOAF, SIOC, DC, DCTERMS, SCOT, XS, RDF

log = boot.log
if os.environ.get('PHOTO_TIMING_LOG'):
    logging.getLogger("timing").setLevel(logging.INFO)

myPicSubdirs = [d for d in os.listdir("/my/pic") if d != "~thumb"]

c3po = restkit.Resource('http://bang:9040/')

def msgAdmins(msg):
    for u in auth.superagents:
        c3po.post(path='',
                  payload={
                      'user' : u,
                      'msg' : msg,
                      'mode' : 'xmpp'
                      },
                  headers={'content-type' :
                           'application/x-www-form-urlencoded'}
                  )

def importModule(name):
    m = __import__(name)
    if os.environ.get("PHOTO_RELOAD"):
        reload(m)
    return m        

class ImagePage(rend.Page):
    def __init__(self, graph, uri):
        self.graph, self.uri = graph, uri

    def renderHTTP(self, ctx):
        # i don't have this page made up yet; just use imageset.py
        req = inevow.IRequest(ctx)
        req.redirect(absoluteSite('/set?current='+urllib.quote(self.uri, safe='')))
        return ''

    def render_large(self, ctx, data):
        return T.img(src=self.uri.replace('file:/my/pic','') + '?size=large')
    
    docFactory = loaders.stan(T.html[T.body[
        'page', T.directive("large"),
        ]])

class ImageSizeResponse(rend.Page):
    """
    just gets the size of the image. You can still pass a size=large
    type of param
    """
    def __init__(self, graph, uri):
        self.graph, self.uri = graph, uri

    def renderHTTP(self, ctx):
        # needs vis check to avoid leaking img existence and size
        size = getRequestedSize(ctx)
        r = MediaResource(self.graph, self.uri)
        w, h = r.getRes(size)
        inevow.IRequest(ctx).setHeader('Content-type', 'application/json')
        return json.dumps({'width' : w, 'height' : h})

class Main(rend.Page):
    docFactory = loaders.stan(T.html[T.body[

T.h2["index_html"],
T.p["You're probably looking for ", T.a(href="harlan/")["Harlan's pictures"]],

        ]])
    
    def __init__(self, graph):
        self.graph = graph

    def subresource(self, lastSegment, uri, ctx, request):
        """uri is some image, lastSegment is like 'comments'. This
        proxying might be done upstream by the webserver, so we can't
        add any other logic in here (including security checks!)

        the other server will always be passed a param 'uri' with the
        image uri
        """

        request.uri = str(
            url.URL.fromString(request.uri).
            add('uri', uri)
            )

        sh = networking.serviceHost

        if lastSegment == 'comments':
            args = networking.commentProxy()
        elif lastSegment == 'facts':  args = sh, 9043, '/facts'
        elif lastSegment == 'links':  args = sh, 9043, '/links'
        elif lastSegment == 'tags':   args = sh, 9043, '/tags'
        elif lastSegment == 'alt':    args = sh, 9043, '/alt'
        elif lastSegment == 'single': args = sh, 8041, '/single'
        elif lastSegment == 'page':
            return ImagePage(self.graph, uri)
        elif lastSegment == 'size':
            return ImageSizeResponse(self.graph, uri)
        else:
            raise NotImplementedError()

        return ReverseProxyResource(*args)


    def locateChild(self, ctx, segments):
        request = inevow.IRequest(ctx)
        if 1:
            request.setHost(*absSiteHost)

        uriSuffix = urllib.quote('/'.join(segments))
        # if you paste a url from a browser to another one, the first
        # one might have been sending %3A while the second one will
        # start sending :
        # This might be a chrome-only issue: http://code.google.com/p/chromium/issues/detail?id=64732
        uriSuffix = uriSuffix.replace(':', '%3A')
        uri = SITE[uriSuffix]

        if segments[0] in myPicSubdirs:
            if segments[-1] in ['facts', 'page', 'links', 'comments',
                                'histogram', 'tags', 'description',
                                'sizes', 'access', 'size', 'single', 'alt']:
                # danger, user data!
                uri = SITE[urllib.quote('/'.join(segments[:-1]))]
                return self.subresource(segments[-1], uri, ctx, request), []

            if self.graph.contains((uri, RDF.type, FOAF['Image'])):
                # if we get here, then the routing failed to send us
                # to the other server. This happens if
                # nginx_route.conf is missing a case, but also for
                # URIs like alt pics that aren't so obvious to route

                if ctx.arg('page'): # old; use {img}/page now
                    return ImagePage(self.graph, uri), ()
                
                return ReverseProxyResource(
                    *(networking.mediaServeProxy2() + (relPath(str(uri)),))), []
            
        if segments[0] in ['2003', '2004', '2005', '2006', '2007', 
                           '2008', '2009', '2010', '2011', '2012']:
            its = lambda o: self.graph.contains((uri, RDF.type, o))
            if (its(PHO['Event']) or
                its(PHO['Place']) or
                its(PHO['Person']) or # oops
                its(FOAF['Person'])):
                return self.topicChild(ctx, uri)
            print "uri %r not a searchable set" % uri

        return rend.Page.locateChild(self, ctx, segments)

    def topicChild(self, ctx, uri):
        if ctx.arg('random'):
            return importModule('imageSet').RandomImage(self.graph, uri, ctx), ()

        if ctx.arg('edit'):
            return self.child_set(ctx), ()

        return self.makeStoryPage(uri), ()

    def makeStoryPage(self, topic):
        story = importModule('story')
        g = self.graph
        class ret(rend.Page):
            def renderHTTP(self, ctx):
                req = inevow.IRequest(ctx)
                req.setHeader('Content-Type', 'application/xhtml+xml')
                cookie = req.getHeader("cookie") or ''
                user = webuser.getUser(ctx)
                try:
                    req.write(story.renderPage(g, topic,
                                               user, 
                                               cookie))
                except access.NeedsMoreAccess:
                    setAccessError(req, user, topic)
                req.finish()
                return ''
        return ret()

    def child_set(self, ctx):
        imageSet = importModule('imageSet')
        ua = inevow.IRequest(ctx).getHeader('user-agent') or ''
        if 'iPad' in ua or ctx.arg('tablet') == '1':
            cls = imageSet.ImageSetTablet
        else:
            cls = imageSet.ImageSet
        return cls(ctx, self.graph, inevow.IRequest(ctx).uri)

    def child_events(self, ctx):
        return importModule('search').Events(ctx, self.graph)

    def child_browse(self, ctx):
        return importModule('browse').FileBrowse(ctx, self.graph)

    def child_edit(self, ctx, _name="Edit"):
        req = inevow.IRequest(ctx)
        user = URIRef(req.getHeader('x-openid-proxy'))
        if user not in auth.superusers:
            raise ValueError("forbidden")
        
        return getattr(importModule('edit'), _name)(ctx, self.graph)

    def child_edit2(self, ctx):
        return self.child_edit(ctx, _name="Edit2")

    def child_static(self, ctx):
        return static.File(sibpath(__file__, "static"))

    def child_aclChange(self, ctx):
        req = inevow.IRequest(ctx)
        if req.method != 'POST':
            raise ValueError("invalid method")

        user = webuser.getUser(ctx)
        op = ctx.arg('op')
        accessTo = URIRef(ctx.arg('accessTo'))

        if ctx.arg('email'):
            if op != "allow":
                raise NotImplementedError()
            newAgent = access.addByEmail(self.graph, user,
                                         ctx.arg('email'), accessTo)
            return returnJson({"msg" : "added",
                               "agent" : newAgent,
                               "agentState":True})

        if not ctx.arg('agent'):
            raise ValueError("missing agent")
        agent = URIRef(ctx.arg('agent'))
        if op == 'allow':
            access.addAccess(self.graph, user, agent, accessTo)
            return returnJson({"msg" : "added", "agentState":True})
        elif op == 'deny':
            access.removeAccess(self.graph, user, agent, accessTo)
            return returnJson({"msg" : "removed", "agentState":False})
        else:
            raise NotImplementedError("op: %r" % op)

    def child_templates(self, ctx):
        """big json bundle of all the templates"""
        allTemplates = dict(
            (n, open("template/%s.mustache" % n).read())
            for n in "topBar featured featuredMeta photosInSet preload pageJson aclwidget".split())
        return json.dumps({"templates" : allTemplates})

def setAccessError(req, user, topic):
    if req.getHeader('x-openid-proxy') and not user:
        req.setResponseCode(http.FORBIDDEN)
        req.write(("You have a working openid but you cannot see %s" %
                   topic).encode('utf8'))
        msgAdmins("Openid %s has no user yet and cannot see %s . Use http://bigasterisk.com/magma/openidAccess to associate this openid." %
                  (req.getHeader('x-openid-proxy'), topic))
    if user:
        req.setResponseCode(http.FORBIDDEN)
        req.write(("Your user cannot see %s" % topic).encode('utf8'))
        msgAdmins("User %s tried to see %s but is not allowed. Use http://bigasterisk.com/magma/openidAccess to configure users." %
                  (user, topic))
    else:
        req.setResponseCode(303)
        req.setHeader(
            "Location",
            "http://photo.bigasterisk.com/login?" +
            urllib.urlencode([('redir', req.uri)]))

def returnJson(d):
    class ret(rend.Page):
        def renderHTTP(self, ctx):
            req = inevow.IRequest(ctx)
            req.setHeader('Content-Type', 'application/json')
            req.write(json.dumps(d))
            req.finish()
            return ''
    return ret()
    

setattr(Main, "child_favicon.ico", static.File("static/favicon.ico"))

log.setLevel(logging.INFO)
graph = getGraph()
site = appserver.NevowSite(Main(graph))
reactor.listenTCP(int(os.environ['PORT']), site, interface='::')
reactor.run()
