from __future__ import division
import sys, os, urllib, logging, json

# for rdflib
sys.path.insert(0, "/my/proj/ffg/lib/rdflib/build/lib.linux-i686-2.5/")

from twisted.application import internet, service
from twisted.python.util import sibpath
from twisted.web import http
from twisted.web.proxy import ReverseProxyResource
from nevow import appserver, inevow, url
from nevow import loaders, rend, static, tags as T
from xml.utils import iso8601
from photos import getSize, getRequestedSize
import rdflib
print "rdflib", rdflib.__version__
from rdflib import URIRef
import auth, networking
import access
from db import getGraph
from urls import absoluteSite, absSiteHost
from ns import PHO, SITE, FOAF, SIOC, DC, DCTERMS, SCOT, XS, RDF

log = logging.getLogger()
logging.getLogger('restkit.client').setLevel(logging.WARN)
logging.getLogger('restkit.conn').setLevel(logging.INFO)


myPicSubdirs = [d for d in os.listdir("/my/pic") if d != "~thumb"]

class ImagePage(rend.Page):
    def __init__(self, graph, uri):
        self.graph, self.uri = graph, uri

    def renderHTTP(self, ctx):
        # i don't have this page made up yet; just use imageset.py
        req = inevow.IRequest(ctx)
        req.redirect('http://photo.bigasterisk.com/set?current='+urllib.quote(self.uri, safe=''))
        return ''

    def render_large(self, ctx, data):
        return T.img(src=self.uri.replace('file:/my/pic','') + '?size=large')
    
    docFactory = loaders.stan(T.html[T.body[
        'page', T.directive("large"),
        ]])

class ImageSizeResponse(rend.Page):
    """
    just gets the size of the image. You can still pass a size=large
    type of param
    """
    def __init__(self, graph, uri):
        self.graph, self.uri = graph, uri

    def renderHTTP(self, ctx):
        # needs vis check to avoid leaking img existence and size
        size = getRequestedSize(ctx)
        w, h = getSize(self.uri, size)
        inevow.IRequest(ctx).setHeader('Content-type', 'application/json')
        return json.dumps({'width' : w, 'height' : h})

class Main(rend.Page):
    docFactory = loaders.stan(T.html[T.body[

T.h2["index_html"],
T.p["You're probably looking for ", T.a(href="harlan/")["Harlan's pictures"]],

        ]])
    
    def __init__(self, graph):
        self.graph = graph

    def subresource(self, lastSegment, uri, ctx, request):
        """uri is some image, lastSegment is like /comments. This
        proxying might be done upstream by the webserver, so we can't
        add any other logic in here (including security checks!)

        the other server will always be passed a param 'uri' with the
        image uri
        """

        request.uri = str(
            url.URL.fromString(request.uri).
            add('uri', uri)
            )

        if lastSegment == 'comments':
            args = networking.commentProxy()
        elif lastSegment == 'facts': args = networking.serviceHost, 9043, '/facts'
        elif lastSegment == 'links': args = networking.serviceHost, 9043, '/links'
        elif lastSegment == 'tags': args = networking.serviceHost, 9043, '/tags'
        elif lastSegment == 'page':
            return ImagePage(self.graph, uri)
        elif lastSegment == 'size':
            return ImageSizeResponse(self.graph, uri)
        elif lastSegment == 'single':
            import sharesingle
            reload(sharesingle)
            p = sharesingle.ShareSingle(self.graph, uri)
            class wrap(rend.Page):
                def renderHTTP(self, ctx):
                    r = inevow.IRequest(ctx)
                    r.setHeader('Content-type', 'application/xhtml+xml')
                    return p.render(r.getHeader("cookie") or '',
                                    r.getHeader("x-forwarded-for") or '')
            return wrap()
        else:
            raise NotImplementedError()

        return ReverseProxyResource(*args)


    def locateChild(self, ctx, segments):
        request = inevow.IRequest(ctx)
        if 1:
            request.setHost('photo.bigasterisk.com', 80)

        uriSuffix = urllib.quote('/'.join(segments))
        # if you paste a url from a browser to another one, the first
        # one might have been sending %3A while the second one will
        # start sending :
        # This might be a chrome-only issue: http://code.google.com/p/chromium/issues/detail?id=64732
        uriSuffix = uriSuffix.replace(':', '%3A')
        uri = SITE[uriSuffix]

        if segments[0] in myPicSubdirs:
            if segments[-1] in ['facts', 'page', 'links', 'comments',
                                'histogram', 'tags', 'description',
                                'sizes', 'access', 'size', 'single']:
                # danger, user data!
                uri = SITE[urllib.quote('/'.join(segments[:-1]))]
                return self.subresource(segments[-1], uri, ctx, request), []

            if self.graph.contains((uri, RDF.type, FOAF['Image'])):
                # if we get here, then the routing failed to send us
                # to the other server. Maybe redir to a path that is
                # more obviously routable?

                if ctx.arg('page'): # old; use {img}/page now
                    return ImagePage(self.graph, uri), ()

                raise NotImplementedError(
                    "request for %r routed to incorrect backend service. "
                    "Check nginx_route.conf rules" % uri)
            
        if segments[0] in ['2003', '2004', '2005', '2006', '2007', 
                           '2008', '2009', '2010', '2011', '2012']:
            its = lambda o: self.graph.contains((uri, RDF.type, o))
            if (its(PHO['Event']) or
                its(PHO['Place']) or
                its(PHO['Person']) or # oops
                its(FOAF['Person'])):
                return self.topicChild(ctx, uri)
            print "uri %r not a searchable set" % uri

        return rend.Page.locateChild(self, ctx, segments)

    def topicChild(self, ctx, uri):
        if ctx.arg('random'):
            import imageSet
            reload(imageSet)
            return imageSet.RandomImage(self.graph, uri, ctx), ()

        if ctx.arg('edit'):
            return self.child_set(ctx), ()

        return self.makeStoryPage(uri), ()

    def makeStoryPage(self, topic):
        import story
        reload(story)
        class ret(rend.Page):
            def renderHTTP(self, ctx):
                req = inevow.IRequest(ctx)
                req.setHeader('Content-Type', 'application/xhtml+xml')
                cookie = inevow.IRequest(ctx).getHeader("cookie") or ''
                req.write(story.renderPage(self.graph, topic,
                                           access.getUser(ctx), 
                                           cookie))
                req.finish()
                return ''
        return ret()

    def child_set(self, ctx):
        import imageSet
        reload(imageSet)
        ua = inevow.IRequest(ctx).getHeader('user-agent')
        if 'iPad' in ua or ctx.arg('tablet') == '1':
            cls = imageSet.ImageSetTablet
        else:
            cls = imageSet.ImageSet
        return cls(ctx, self.graph, inevow.IRequest(ctx).uri)

    def child_events(self, ctx):
        import search
        reload(search)
        return search.Events(ctx, self.graph)

    def child_browse(self, ctx):
        import browse
        reload(browse)
        return browse.FileBrowse(ctx, self.graph)

    def child_edit(self, ctx, _name="Edit"):
        req = inevow.IRequest(ctx)
        user = URIRef(req.getHeader('x-openid-proxy'))
        if user not in auth.superusers:
            raise ValueError("forbidden")
        
        import edit
        reload(edit)
        return getattr(edit, _name)(ctx, self.graph)

    def child_edit2(self, ctx):
        return self.child_edit(ctx, _name="Edit2")

    def child_static(self, ctx):
        return static.File(sibpath(__file__, "static"))

    def child_aclChange(self, ctx):
        req = inevow.IRequest(ctx)
        if req.method != 'POST':
            raise ValueError("invalid method")

        user = access.getUser(ctx)
        agent = URIRef(ctx.arg('agent'))
        accessTo = URIRef(ctx.arg('accessTo'))
        op = ctx.arg('op')
        if op == 'allow':
            access.addAccess(self.graph, user, agent, accessTo)
            return returnJson({"msg" : "added", "agentState":True})
        elif op == 'deny':
            access.removeAccess(self.graph, user, agent, accessTo)
            return returnJson({"msg" : "removed", "agentState":False})
        else:
            raise NotImplementedError("op: %r" % op)

def returnJson(d):
    class ret(rend.Page):
        def renderHTTP(self, ctx):
            req = inevow.IRequest(ctx)
            req.setHeader('Content-Type', 'application/json')
            req.write(json.dumps(d))
            req.finish()
            return ''
    return ret()
    

setattr(Main, "child_favicon.ico", static.File("static/favicon.ico"))

logging.basicConfig(level=logging.DEBUG)

graph = getGraph()

application = service.Application('photo')
webServer = internet.TCPServer(8031, appserver.NevowSite(Main(graph)))
webServer.setServiceParent(application)
