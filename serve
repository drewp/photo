from __future__ import division
import md5, urllib, time
from sets import Set
from StringIO import StringIO
from twisted.application import internet, service
from nevow import appserver
from nevow import loaders, rend, static, tags as T
import Image

class Full(object): pass

def thumb(localURL, maxSize=100):

    cksum = md5.new(localURL + "?size=%s" % maxSize).hexdigest()
    
    print "resizing", localURL
    try:
        f = open("/my/pic/digicam/~thumb/%s" % cksum)
    except IOError:
        pass
    else:
        return f.read()

    # localURL like http://photo.bigasterisk.com/digicam/housewarm/00023.jpg
    #         means /my/pic/digicam/housewarm/00023.jpg
    assert localURL.startswith("http://photo.bigasterisk.com/")
    localPath = "/my/pic/" + localURL[len("http://photo.bigasterisk.com/"):]
    print localPath

    if maxSize is Full:
        return open(localPath).read()

    img = Image.open(localPath)
    img.thumbnail((maxSize, maxSize))
    jpg = StringIO()
    jpg.name = localURL
    q = 75
    if maxSize == 100:
        q = 40
    img.save(jpg, quality=q, optimize=True)
    open("/my/pic/digicam/~thumb/%s" % cksum, "w").write(jpg.getvalue())
    return jpg.getvalue()

class ImagePage(rend.Page):
    def __init__(self, uri):
        self.uri = uri

    def render_large(self, ctx, data):
        return T.img(src=self.uri.replace('file:/my/pic','') + '?size=large')
    
    docFactory = loaders.stan(T.html[T.body[
        'ho', T.directive("large"),
        ]])

class Main(rend.Page):
    docFactory = loaders.stan(T.html[T.body[

T.h2["index_html"],
T.p["You're probably looking for ", T.a(href="harlan/")["Harlan's pictures"]],

        ]])
    
    def __init__(self):
        return
        self.thumb = {} # urlmd5 : small jpeg
        self.urlmd5 = {} # urlmd5 : local uri

        for local in graph.objects(None, PR['localFile']):
            self.urlmd5[md5.md5(local).hexdigest()] = local
        


    def locateChild(self, ctx, segments):
        if segments[0] == 'digicam':
            # danger, user data!
            uri = "http://photo.bigasterisk.com/digicam/" + '/'.join(segments[1:])

            if uri not in map(str.strip, open("allowed.urls").readlines()):
                return "access denied", []

            if ctx.arg('page'):
                return ImagePage(uri), ()

            size = {'thumb' : 100,
                    'medium' : 250,
                    'large' : 600,
                    'full' : Full}.get(ctx.arg('size'), 100)

            jpg = thumb(uri, size)
            
            return static.Data(jpg, "image/jpeg"), ()

        else:
            return rend.Page.locateChild(self, ctx, segments)



application = service.Application('photo')
webServer = internet.TCPServer(8086, appserver.NevowSite(Main()))
webServer.setServiceParent(application)
