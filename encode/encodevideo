#!/usr/bin/python
# ^ should be on the virtualenv python, but i have mixed distros still so that's hard

# <input video> <output.webm>
# this tool writes to a side file first so you won't see an in-progress output

import sys, subprocess, os, re, random
sys.path.append("..")
from dims import fitSize

inPath, outPath = sys.argv[1:]

tmpSuffix = ".tmp" + ''.join([random.choice(string.letters) for c in range(5)])
tmpOut = outPath + tmpSuffix + os.path.splitext(outPath)[1]

try:
    probe = subprocess.Popen(['/usr/bin/avprobe', inPath], stderr=subprocess.PIPE).communicate()[1]
    print repr(probe)
    m = re.search(r'Video.*?(\d+)x(\d+)', probe)
    w, h = map(int, m.groups())

    outSize = fitSize(w, h, 320, 320)

    convArgs = ['-y', '-i', inPath, '-s', '%sx%s' % outSize]
    if '11025 Hz' in probe or '11024 Hz' in probe:
        # see http://ffmpeg-users.933282.n4.nabble.com/ffmpeg-fails-to-create-webm-content-if-audio-bitrate-is-less-than-44K-td2303313.html
        # '11024' is from some canon cam
        convArgs.extend(['-ar', '44100'])
    convArgs.append(tmpOut)

    subprocess.check_call(['/usr/bin/avconv'] + convArgs)
    os.rename(tmpOut, outPath)

except Exception, e:
    try:
        os.unlink(tmpOut)
    except OSError:
        pass
    raise e
